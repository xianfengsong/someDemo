package guava.retryer;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.github.rholder.retry.Attempt;
import com.github.rholder.retry.RetryException;
import com.github.rholder.retry.RetryListener;
import com.github.rholder.retry.Retryer;
import com.github.rholder.retry.RetryerBuilder;
import com.github.rholder.retry.StopStrategies;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;
import org.junit.Test;

/**
 * author Xianfeng <br/>
 * date 19-7-22 上午9:58 <br/>
 * Desc:
 * 测试一个基于guava扩展的开源的重试工具，支持定义重试条件(根据异常类型/返回结果)，支持retryListener
 * https://github.com/rholder/guava-retrying
 */
public class RetryerDemo {

    @Test
    public void t() {
        String json = "[[1563518400,325.35545],[1563519600,274.13125],[1563520800,348.78215],[1563522000,356.5981],[1563523200,301.6947],[1563524400,252.02055],[1563525600,263.54695],[1563526800,236.6265],[1563528000,297.37615],[1563529200,287.96325],[1563530400,277.39735],[1563531600,286.5149],[1563532800,277.4422],[1563534000,274.51745],[1563535200,282.50835],[1563536400,323.6923],[1563537600,253.4226],[1563538800,263.69065],[1563540000,265.5507],[1563541200,295.27165],[1563542400,286.36075],[1563543600,266.64085],[1563544800,287.3771],[1563546000,337.64],[1563547200,345.9111],[1563548400,304.1073],[1563549600,286.8726],[1563550800,309.60585],[1563552000,320.63105],[1563553200,299.8224],[1563554400,314.24645],[1563555600,343.5526],[1563556800,364.70645],[1563558000,361.62365],[1563559200,303.5899],[1563560400,336.96555],[1563561600,326.8713],[1563562800,401.3396],[1563564000,367.34365],[1563565200,289.67105],[1563566400,305.86585],[1563567600,328.4158],[1563568800,325.6894],[1563570000,390.5069],[1563571200,368.75],[1563572400,296.2],[1563573600,287.4],[1563574800,254.3],[1563576000,270.85],[1563577200,277.9],[1563578400,235.65],[1563579600,223.2],[1563580800,221.5],[1563582000,265.75],[1563583200,197.6],[1563584400,204.35],[1563585600,228.2],[1563586800,283.45],[1563588000,220.2],[1563589200,198.1],[1563590400,282.05],[1563591600,268.6],[1563592800,309.5],[1563594000,269.15],[1563595200,268.55],[1563596400,262.1],[1563597600,260.4406],[1563598800,340.6715],[1563600000,301.95865],[1563601200,301.86945],[1563602400,334.47665],[1563603600,282.6992],[1563604800,310.80855],[1563606000,268.0777],[1563607200,263.09515],[1563608400,267.18975],[1563609600,302.99035],[1563610800,281.3472],[1563612000,294.38925],[1563613200,268.33],[1563614400,261.71545],[1563615600,338.28215],[1563616800,271.56015],[1563618000,324.2085],[1563619200,285.08005],[1563620400,299.46365],[1563621600,298.08755],[1563622800,343.20795],[1563624000,306.06305],[1563625200,276.45295],[1563626400,399.6879],[1563627600,284.3821],[1563628800,344.85875],[1563630000,346.7306],[1563631200,325.6828],[1563632400,361.38695],[1563633600,321.56165],[1563634800,337.71835],[1563636000,323.1084],[1563637200,364.19965],[1563638400,326.08395],[1563639600,336.98605],[1563640800,369.0356],[1563642000,312.3169],[1563643200,318.2288],[1563644400,326.13895],[1563645600,356.97305],[1563646800,315.96465],[1563648000,330.1245],[1563649200,346.24025],[1563650400,339.4759],[1563651600,350.836],[1563652800,359.96185],[1563654000,339.67755],[1563655200,366.81145],[1563656400,332.7032],[1563657600,355.65],[1563658800,326.3],[1563660000,345.8],[1563661200,320.1],[1563662400,276.25],[1563663600,231.75],[1563664800,254.15],[1563666000,282.25],[1563667200,254.95],[1563668400,230.1],[1563669600,307.55],[1563670800,247.9],[1563672000,242.5],[1563673200,264.05],[1563674400,283.15],[1563675600,304.7],[1563676800,359.8],[1563678000,336.95],[1563679200,343.65],[1563680400,294.85],[1563681600,315.6],[1563682800,307.1],[1563684000,352.71895],[1563685200,320.03015],[1563686400,299.5353],[1563687600,308.88095],[1563688800,295.06175],[1563690000,348.70015],[1563691200,325.96455],[1563692400,284.34855],[1563693600,305.1619],[1563694800,334.3081],[1563696000,273.73795],[1563697200,288.2972],[1563698400,259.90865],[1563699600,317.80665],[1563700800,277.96845],[1563702000,312.9937],[1563703200,267.098],[1563704400,280.97685],[1563705600,359.8339],[1563706800,319.65865],[1563708000,315.7247],[1563709200,276.7962],[1563710400,280.29575],[1563711600,280.23835],[1563712800,273.92975],[1563714000,310.7721],[1563715200,290.4065],[1563716400,263.9422],[1563717600,300.95315],[1563718800,300.1806],[1563720000,328.4932],[1563721200,303.61705],[1563722400,313.07605],[1563723600,323.7141],[1563724800,293.74065],[1563726000,318.39305],[1563727200,295.87625],[1563728400,308.46685],[1563729600,373.10595],[1563730800,341.84545],[1563732000,292.2096],[1563733200,333.80685],[1563734400,323.9387],[1563735600,353.3348],[1563736800,324.36335],[1563738000,305.2921],[1563739200,327.2215],[1563740400,354.648],[1563741600,353.53955],[1563742800,345.033],[1563744000,291.55],[1563745200,262.05],[1563746400,310.7],[1563747600,237.75],[1563748800,270.25],[1563750000,265.15],[1563751200,273.85],[1563752400,240.6],[1563753600,210.6],[1563754800,227.75],[1563756000,174],[1563757200,233.05],[1563758400,240.95],[1563759600,252.15],[1563760800,249.35],[1563762000,324.9],[1563763200,254.65],[1563764400,302.1],[1563765600,290.6],[1563766800,331.65],[1563768000,277.30085],[1563769200,258.4328],[1563770400,255.37125],[1563771600,350.3761],[1563772800,295.7422],[1563774000,335.46785],[1563775200,309.2187],[1563776400,303.9533],[1563777600,276.4869],[1563778800,277.12675],[1563780000,262.29285],[1563781200,273.47115],[1563782400,296.95565],[1563783600,306.71505],[1563784800,279.1277],[1563786000,310.77495],[1563787200,306.84935],[1563788400,325.75235],[1563789600,328.057],[1563790800,307.13255],[1563792000,280.80375],[1563793200,300.45125],[1563794400,329.00455],[1563795600,292.8267],[1563796800,314.65865],[1563798000,290.55315],[1563799200,288.13635],[1563800400,282.235],[1563801600,291.34735],[1563802800,319.2795],[1563804000,308.81255],[1563805200,290.064],[1563806400,316.1494],[1563807600,261.7272],[1563808800,295.4849],[1563810000,325.30985],[1563811200,292.59855],[1563812400,331.56605],[1563813600,343.29745],[1563814800,308.19115],[1563816000,353.97275],[1563817200,339.4256],[1563818400,302.5369],[1563819600,301.1073],[1563820800,300.4863],[1563822000,395.8405],[1563823200,357.1292],[1563824400,347.26325],[1563825600,297.90505],[1563826800,348.50835],[1563828000,356.1693],[1563829200,535.7352],[1563830400,326.55],[1563831600,363.7],[1563832800,291],[1563834000,255.65],[1563835200,312.1],[1563836400,302.65],[1563837600,287.95],[1563838800,193],[1563840000,252.75],[1563841200,201.15],[1563842400,314.4],[1563843600,273.8],[1563844800,264.45],[1563846000,273.4],[1563847200,266],[1563848400,307.3],[1563849600,282.8],[1563850800,288.55],[1563852000,316.3],[1563853200,294.6],[1563854400,306.9478],[1563855600,337.2888],[1563856800,271.3993],[1563858000,267.12915],[1563859200,252.34935],[1563860400,253.4624],[1563861600,311.11965],[1563862800,297.92135],[1563864000,352.56595],[1563865200,318.5848],[1563866400,299.0263],[1563867600,320.81845],[1563868800,301.56865],[1563870000,331.2507],[1563871200,380.7622],[1563872400,344.9289],[1563873600,275.8248],[1563874800,282.43385],[1563876000,289.4638],[1563877200,265.7654],[1563878400,311.95395],[1563879600,253.51745],[1563880800,265.00885],[1563882000,296.30995],[1563883200,277.5458],[1563884400,307.5573],[1563885600,254.83135],[1563886800,269.1253],[1563888000,276.8416],[1563889200,320.71445],[1563890400,269.7328],[1563891600,281.19685],[1563892800,295.7527],[1563894000,278.04435],[1563895200,280.05655],[1563896400,296.6941],[1563897600,283.31365],[1563898800,281.30075],[1563900000,288.79],[1563901200,264.6119],[1563902400,311.2754],[1563903600,370.3362],[1563904800,350.1642],[1563906000,371.67995],[1563907200,342.98725],[1563908400,325.7462],[1563909600,336.8744],[1563910800,316.75445],[1563912000,311.2337],[1563913200,369.81415],[1563914400,335.7217],[1563915600,408.13105],[1563916800,317.3],[1563918000,315.15],[1563919200,303.5],[1563920400,283.85],[1563921600,235.2],[1563922800,228.55],[1563924000,223.1],[1563925200,294.7],[1563926400,248.65],[1563927600,226.65],[1563928800,226],[1563930000,207.5],[1563931200,255.8],[1563932400,285.25],[1563933600,261.1],[1563934800,342.9],[1563936000,282.3],[1563937200,254.1],[1563938400,339.45],[1563939600,287.75],[1563940800,345.4638],[1563942000,304.74775],[1563943200,317.243],[1563944400,274.26435],[1563945600,292.09925],[1563946800,244.09225],[1563948000,261.14925],[1563949200,273.21025],[1563950400,314.5521],[1563951600,266.6482],[1563952800,348.1518],[1563954000,259.79365],[1563955200,260.24515],[1563956400,298.5905],[1563957600,290.70745],[1563958800,266.08715],[1563960000,262.90925],[1563961200,266.0074],[1563962400,279.16385],[1563963600,345.0962],[1563964800,358.51915],[1563966000,272.45885],[1563967200,280.447],[1563968400,297.63905],[1563969600,346.5538],[1563970800,306.8536],[1563972000,345.44425],[1563973200,321.6206],[1563974400,290.69105],[1563975600,262.09095],[1563976800,306.67705],[1563978000,286.1882],[1563979200,292.45055],[1563980400,289.9351],[1563981600,312.5062],[1563982800,342.3702],[1563984000,271.69315],[1563985200,313.5375],[1563986400,297.07815],[1563987600,298.5622],[1563988800,330.753],[1563990000,326.27715],[1563991200,311.1214],[1563992400,402.698],[1563993600,350.66645],[1563994800,350.6453],[1563996000,350.61875],[1563997200,330.7838],[1563998400,343.1219],[1563999600,305.75275],[1564000800,291.53355],[1564002000,284.53745],[1564003200,319.99325],[1564004400,313.2],[1564005600,263.75],[1564006800,312.4],[1564008000,290.25],[1564009200,198.75],[1564010400,251.45],[1564011600,191.95],[1564012800,255.4],[1564014000,228.15],[1564015200,223.35],[1564016400,211.95],[1564017600,208.95],[1564018800,284.75],[1564020000,234.95],[1564021200,274.9],[1564022400,256.45],[1564023600,315.75],[1564024800,279.7],[1564026000,326.4238],[1564027200,291.32195],[1564028400,332.46785],[1564029600,302.40685],[1564030800,290.71545],[1564032000,269.0472],[1564033200,314.3127],[1564034400,292.34145],[1564035600,348.8713],[1564036800,309.79575],[1564038000,322.32625],[1564039200,269.7541],[1564040400,314.9317],[1564041600,344.7424],[1564042800,268.5103],[1564044000,343.68325],[1564045200,322.07465],[1564046400,315.71635],[1564047600,277.632],[1564048800,320.23625],[1564050000,260.65965],[1564051200,245.0719],[1564052400,249.77975],[1564053600,314.15365],[1564054800,293.85105],[1564056000,285.98865],[1564057200,304.6725],[1564058400,293.76],[1564059600,313.7827],[1564060800,296.02405],[1564062000,275.1959],[1564063200,290.6796],[1564064400,267.2501],[1564065600,310.1194],[1564066800,255.13355],[1564068000,275.60375],[1564069200,258.0907],[1564070400,282.66985],[1564071600,271.7661],[1564072800,272.15515],[1564074000,294.1264],[1564075200,247.7206],[1564076400,301.19075],[1564077600,288.6406],[1564078800,282.4312],[1564080000,291.3951],[1564081200,268.1268],[1564082400,270.18505],[1564083600,278.99065],[1564084800,280.1888],[1564086000,286.8604],[1564087200,459.67085],[1564088400,372.61995],[1564089600,264.37345],[1564090800,292.9],[1564092000,277.5],[1564093200,268.3],[1564094400,211.8],[1564095600,247.35],[1564096800,261.55],[1564098000,217],[1564099200,236.25],[1564100400,264.7],[1564101600,221.55],[1564102800,261.25],[1564104000,223.9],[1564105200,263.45],[1564106400,252.75],[1564107600,247.1],[1564108800,241.6],[1564110000,269.8],[1564111200,272.35],[1564112400,274.70715],[1564113600,273.25935],[1564114800,255.8227],[1564116000,264.8364],[1564117200,274.2246],[1564118400,287.6788],[1564119600,295.3508],[1564120800,289.21095]]";
        JSONArray array = JSON.parseArray(json);
        List<BigDecimal> values = new ArrayList<>(array.size());
        for (Object a : array.toArray()) {
            JSONArray jsonArray = (JSONArray) a;
            BigDecimal v = jsonArray.getBigDecimal(1);
            values.add(v);
        }
        double std = getStdDEV(values);
        System.out.println(std);
        System.out.println(std * 3 + 296.42f);
    }

    @Test
    public void testGetStdDEV() {
        List<BigDecimal> value = new ArrayList<>();
        value.add(new BigDecimal(53));
        value.add(new BigDecimal(61));
        value.add(new BigDecimal(49));
        value.add(new BigDecimal(67));
        value.add(new BigDecimal(55));
        value.add(new BigDecimal(63));
        System.out.println(getStdDEV(value));
    }

    private double getStdDEV(List<BigDecimal> values) {
        BigDecimal sum = new BigDecimal(0.0f);
        for (BigDecimal v : values) {
            sum = sum.add(v);
        }
        BigDecimal count = new BigDecimal(values.size());
        BigDecimal avg = sum.divide(count, BigDecimal.ROUND_HALF_UP);
        System.out.println("avg:" + avg);
        //方差
        BigDecimal variance = new BigDecimal(0);
        for (BigDecimal v : values) {
            variance = variance.add(new BigDecimal(Math.pow(Math.abs(v.subtract(avg).doubleValue()), 2)));
        }
        //求方差 如果样本数据很大，可以除以n-1
        variance = variance.divide(count.subtract(new BigDecimal(1)), BigDecimal.ROUND_HALF_UP);
        //求平方根返回标准差
        return Math.sqrt(variance.doubleValue());
    }

    /**
     * 重试器
     */
    Retryer<Boolean> retryer = RetryerBuilder.<Boolean>newBuilder()
            .retryIfResult(Objects::isNull)
            .retryIfExceptionOfType(IOException.class)
            .retryIfRuntimeException()
            .withStopStrategy(StopStrategies.stopAfterAttempt(2))
            .build();
    //远程调用 依赖其他服务
    private Callable<Boolean> remoteCall;

    /**
     * 测试 达到最大重试次数后，返回异常(包含第一调用)
     *
     * @throws RetryException 重试都失败抛出RetryException
     */
    @Test(expected = RetryException.class)
    public void failWithRetryException() throws RetryException {
        try {
            remoteCall = () -> {
                System.out.println("call");
                throw new RuntimeException();
            };
            retryer.call(remoteCall);
        } catch (ExecutionException e) {
            //callable返回异常但是没有触发重试，抛出ExecutionException
            e.printStackTrace();
        } catch (RetryException e) {
            //重试后仍然失败，抛出这个RetryException异常
            System.out.println("retryer重试后仍然失败:" + e.getMessage());
            throw e;
        }
    }

    /**
     * 测试通过Listener获得每次调用的信息
     */
    @Test
    public void testRetryListener() {
        Retryer<Boolean> retryer = RetryerBuilder.<Boolean>newBuilder()
                .retryIfResult(r -> Objects.equals(r, false))
                .retryIfRuntimeException()
                .withStopStrategy(StopStrategies.stopAfterDelay(5, TimeUnit.MILLISECONDS))
                .withRetryListener(new RetryListener() {
                    @Override
                    public <V> void onRetry(Attempt<V> attempt) {
                        try {
                            System.out.println("\r\n-----");
                            //Attempt封装了一次调用的结果和统计信息
                            if (attempt.hasResult()) {
                                System.out.println("调用结果 :" + attempt.get().toString());
                            }
                            System.out.println("重试次数 :" + attempt.getAttemptNumber());
                            System.out.println("已重试时间：" + attempt.getDelaySinceFirstAttempt());
                            if (attempt.hasException()) {
                                System.out.println("调用的异常：" + attempt.getExceptionCause());
                            }

                        } catch (ExecutionException e) {
                            e.printStackTrace();
                        }
                    }
                }).build();
        try {
            boolean result = retryer.call(() -> {
                if (System.currentTimeMillis() % 2 == 0) {
                    throw new RuntimeException();
                }
                return false;
            });
        } catch (ExecutionException e) {
            e.printStackTrace();
        } catch (RetryException e) {
            e.printStackTrace();
        }
    }

    /**
     * 测试callable执行异常，但是没有触发重试，retryer会抛出ExecutionException
     */
    @Test(expected = ExecutionException.class)
    public void testExecutionException() throws ExecutionException, RetryException {
        Retryer<Boolean> retryer = RetryerBuilder.<Boolean>newBuilder()
                .withStopStrategy(StopStrategies.stopAfterAttempt(3))
                .build();
        //只执行了一次。。 因为没命中重试策略就不会重试
        retryer.call(() -> {
            System.out.println("call");
            throw new RuntimeException();
        });
    }

    /**
     * 测试callable执行异常触发重试，如果重试最大次数之后还是失败，retryer会抛出RetryException
     */
    @Test(expected = RetryException.class)
    public void testRetryException() throws ExecutionException, RetryException {
        Retryer<Boolean> retryer = RetryerBuilder.<Boolean>newBuilder()
                .withStopStrategy(StopStrategies.stopAfterAttempt(3))
                //让它重试
                .retryIfRuntimeException()
                .build();
        retryer.call(() -> {
            System.out.println("call");
            throw new RuntimeException();
        });
    }

}
