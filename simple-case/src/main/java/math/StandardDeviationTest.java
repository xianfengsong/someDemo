package math;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import org.junit.Test;

/**
 * author Xianfeng <br/>
 * date 19-8-2 下午5:24 <br/>
 * Desc: 求标准差
 */
public class StandardDeviationTest {

    /**
     * 根据正态分布，取TP99平均响应时间+3倍标准差做响应时间,可以覆盖99.9973%的TP99响应时间样本
     * 最终会超过响应时间的请求比例估计 (1-.99) * (1-.9973) = 0.0027%
     */
    @Test
    public void get3oAvg99Timeout() {
        JSONArray array = JSON.parseArray(
                "[[1566649200,173],[1566650400,127.75],[1566651600,143.2],[1566652800,216.25],[1566654000,161],[1566655200,156.85],[1566656400,158.3],[1566657600,162.3],[1566658800,240.65],[1566660000,169.3],[1566661200,151.55],[1566662400,194.85],[1566663600,620.15],[1566664800,283],[1566666000,202.7],[1566667200,237.2],[1566668400,138.9],[1566669600,153.55],[1566670800,132.4],[1566672000,206.2],[1566673200,106.75],[1566674400,90.55],[1566675600,88.8],[1566676800,100.55],[1566678000,80.5],[1566679200,65.7],[1566680400,65.7],[1566681600,92.65],[1566682800,80.2],[1566684000,73.45],[1566685200,95.55],[1566686400,75.55],[1566687600,118.3],[1566688800,109.25],[1566690000,86.35],[1566691200,69.9],[1566692400,75.05],[1566693600,79.95],[1566694800,76.85],[1566696000,142],[1566697200,153.3],[1566698400,176.05],[1566699600,158.05],[1566700800,157.25],[1566702000,198.4],[1566703200,167.2],[1566704400,152.05],[1566705600,141.1],[1566706800,127.9],[1566708000,151.15],[1566709200,161.7],[1566710400,171.5],[1566711600,196.55],[1566712800,134.4],[1566714000,143.9],[1566715200,222.55],[1566716400,178.9],[1566717600,175.85],[1566718800,163.25],[1566720000,158.2],[1566721200,178.05],[1566722400,165.1],[1566723600,148.15],[1566724800,211.35],[1566726000,149.1],[1566727200,175.55],[1566728400,141.55],[1566729600,150],[1566730800,174.1],[1566732000,167],[1566733200,190.6],[1566734400,132.5],[1566735600,154.7],[1566736800,201.05],[1566738000,161.9],[1566739200,174.4],[1566740400,159.85],[1566741600,158.65],[1566742800,199.9],[1566744000,186.1],[1566745200,246.6],[1566746400,155.05],[1566747600,137.6],[1566748800,187.8],[1566750000,518.35],[1566751200,205.35],[1566752400,189.55],[1566753600,231.3],[1566754800,137.05],[1566756000,108.55],[1566757200,101.05],[1566758400,126.2],[1566759600,85.35],[1566760800,89.75],[1566762000,73.75],[1566763200,77.15],[1566764400,72.85],[1566765600,65.05],[1566766800,102.9],[1566768000,103.25],[1566769200,86.6],[1566770400,64.3],[1566771600,70.6],[1566772800,71.95],[1566774000,80.5],[1566775200,73.5],[1566776400,73.8],[1566777600,82.6],[1566778800,66.4],[1566780000,78.15],[1566781200,91.8],[1566782400,143.55],[1566783600,159.6],[1566784800,171.35],[1566786000,192.35],[1566787200,207.7],[1566788400,158.9],[1566789600,192.8],[1566790800,116.25],[1566792000,137.25],[1566793200,127.85],[1566794400,122.15],[1566795600,174.65],[1566796800,145.5],[1566798000,177.1],[1566799200,176.5],[1566800400,143.9],[1566801600,152],[1566802800,160.05],[1566804000,155.55],[1566805200,177.4],[1566806400,153.95],[1566807600,205.3],[1566808800,160.35],[1566810000,187.7],[1566811200,339.5],[1566812400,271.9],[1566813600,179.8],[1566814800,217.2],[1566816000,204.5],[1566817200,141.45],[1566818400,202.15],[1566819600,211.5],[1566820800,146.75],[1566822000,126.25],[1566823200,175.15],[1566824400,137.8],[1566825600,227.2],[1566826800,151.35],[1566828000,209.9],[1566829200,158.3],[1566830400,155.5],[1566831600,247.8],[1566832800,172.05],[1566834000,153.65],[1566835200,198.8],[1566836400,680.3],[1566837600,304.4],[1566838800,215.55],[1566840000,293.9],[1566841200,163],[1566842400,123.4],[1566843600,126.85],[1566844800,107.8],[1566846000,80.2],[1566847200,103.15],[1566848400,101.9],[1566849600,95.35],[1566850800,75.95],[1566852000,82.1],[1566853200,73.65],[1566854400,51.5],[1566855600,77.75],[1566856800,50.35],[1566858000,73.15],[1566859200,132.5],[1566860400,91.4],[1566861600,125.4],[1566862800,180.75],[1566864000,138.65],[1566865200,121.05],[1566866400,86.1],[1566867600,112.65],[1566868800,152.4],[1566870000,116.5],[1566871200,146.8],[1566872400,138.55],[1566873600,129.2],[1566874800,122.5],[1566876000,172.5],[1566877200,149.2],[1566878400,142.25],[1566879600,146.75],[1566880800,137.3],[1566882000,135.65],[1566883200,205.95],[1566884400,163.35],[1566885600,140.25],[1566886800,167.6],[1566888000,164.2],[1566889200,168.85],[1566890400,211.7],[1566891600,152.05],[1566892800,229.35],[1566894000,238.65],[1566895200,185.7],[1566896400,194.2],[1566897600,220.8],[1566898800,193.25],[1566900000,177.3],[1566901200,165.7],[1566902400,159.15],[1566903600,204.85],[1566904800,255],[1566906000,211.65],[1566907200,158.9],[1566908400,139.6],[1566909600,170.5],[1566910800,163.95],[1566912000,230.8],[1566913200,212.3],[1566914400,147.8],[1566915600,162.25],[1566916800,171.9],[1566918000,155.95],[1566919200,230.5],[1566920400,183.65],[1566921600,184.55],[1566922800,669.4],[1566924000,235.7],[1566925200,187.65],[1566926400,193.65],[1566927600,156.2],[1566928800,136.9],[1566930000,104.4],[1566931200,129.55],[1566932400,122.35],[1566933600,102.85],[1566934800,76.15],[1566936000,83.5],[1566937200,108.45],[1566938400,65.25],[1566939600,58.3],[1566940800,133.6],[1566942000,56.75],[1566943200,70.1],[1566944400,77.85],[1566945600,73.65],[1566946800,90.5],[1566948000,106.15],[1566949200,122.55],[1566950400,144.95],[1566951600,161.45],[1566952800,138.45],[1566954000,216.5],[1566955200,118.8],[1566956400,129.7],[1566957600,140.4],[1566958800,152.05],[1566960000,137.7],[1566961200,114.7],[1566962400,214],[1566963600,138.8],[1566964800,126.5],[1566966000,136.6],[1566967200,127.15],[1566968400,356.9],[1566969600,241.3],[1566970800,132.7],[1566972000,189.5],[1566973200,238.85],[1566974400,162.4],[1566975600,184.8],[1566976800,221.25],[1566978000,219.4],[1566979200,146.5],[1566980400,166.2],[1566981600,208.65],[1566982800,197.5],[1566984000,184.7],[1566985200,305.25],[1566986400,183.1],[1566987600,179.4],[1566988800,183.9],[1566990000,140],[1566991200,161.7],[1566992400,190.65],[1566993600,147.9],[1566994800,145],[1566996000,148.3],[1566997200,152.75]]");
        List<BigDecimal> values = new ArrayList<>(array.size());
        for (Object a : array.toArray()) {
            JSONArray jsonArray = (JSONArray) a;
            BigDecimal v = jsonArray.getBigDecimal(1);
            values.add(v);
        }
        double avg = getAvg(values);
        double std = getStdDEV(values);
        System.out.println("平均数：" + avg);
        System.out.println("标准差：" + std);
        System.out.println("计算响应时间：" + (std * 3 + avg));

        BigDecimal timeout = new BigDecimal(std * 3 + avg);
        long lessThanTimeout = values.stream().filter(e -> e.compareTo(timeout) < 0).count();
        System.out.println("按照响应时间的通过率：" + (double) lessThanTimeout / values.size());
    }

    @Test
    public void testGetStdDEV() {
        List<BigDecimal> value = new ArrayList<>();
        value.add(new BigDecimal(53));
        value.add(new BigDecimal(61));
        value.add(new BigDecimal(49));
        value.add(new BigDecimal(67));
        value.add(new BigDecimal(55));
        value.add(new BigDecimal(63));
        System.out.println(getStdDEV(value));
    }

    private double getAvg(List<BigDecimal> values) {
        BigDecimal sum = new BigDecimal(0.0f);
        for (BigDecimal v : values) {
            sum = sum.add(v);
        }
        BigDecimal count = new BigDecimal(values.size());
        BigDecimal avg = sum.divide(count, BigDecimal.ROUND_HALF_UP);
        return avg.doubleValue();
    }

    private double getStdDEV(List<BigDecimal> values) {
        BigDecimal sum = new BigDecimal(0.0f);
        for (BigDecimal v : values) {
            sum = sum.add(v);
        }
        BigDecimal count = new BigDecimal(values.size());
        BigDecimal avg = sum.divide(count, BigDecimal.ROUND_HALF_UP);
        //方差
        BigDecimal variance = new BigDecimal(0);
        for (BigDecimal v : values) {
            variance = variance.add(new BigDecimal(Math.pow(Math.abs(v.subtract(avg).doubleValue()), 2)));
        }
        //求方差 如果样本数据很大，可以除以n-1
//        variance = variance.divide(count.subtract(new BigDecimal(1)), BigDecimal.ROUND_HALF_UP);
        variance = variance.divide(count, BigDecimal.ROUND_HALF_UP);
        //求平方根返回标准差
        return Math.sqrt(variance.doubleValue());
    }
}
